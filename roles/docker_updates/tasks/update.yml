---
- name: Get list of all running Docker containers
  command: docker ps --format "{{ '{{' }}.Names{{ '}}' }}"
  register: docker_containers
  changed_when: false

- name: Gather current images of running Docker containers
  shell: |
    docker inspect {{ item }} --format '{{ '{{' }}.Config.Image{{ '}}' }}'
  loop: "{{ docker_containers.stdout_lines }}"
  register: container_images
  failed_when: false
  changed_when: false

- name: Create a dictionary of containers and their images
  set_fact:
    containers_images_dict: "{{ dict(docker_containers.stdout_lines | zip(container_images.results | map(attribute='stdout') | list)) }}"

- name: Print the containers and their images
  debug:
    msg: "Containers and their images: {{ containers_images_dict }}"

- name: Get new image versions from Docker Hub
  uri:
    url: "https://hub.docker.com/v2/repositories/{{ item.split('/')[0] }}/{{ item.split('/')[1].split(':')[0] }}/tags/"
    method: GET
    return_content: yes
    headers:
      Accept: "application/json"
  loop: "{{ containers_images_dict.values() | unique }}"
  register: new_image_versions_response
  failed_when: false
  ignore_errors: yes  # Continue even if some requests fail

- name: Parse new image versions
  set_fact:
    new_image_versions: >-
      {{
        new_image_versions_response.results | 
        selectattr('status', 'equalto', 200) | 
        map(attribute='content') | 
        map('from_yaml') | 
        map('json_query', 'results[*].name') | 
        zip(containers_images_dict.keys()) | 
        map('combine', {'key': item.1, 'value': item.0}) | 
        items2dict
      }}

- name: Determine which containers need updating
  set_fact:
    containers_to_update: >
      {{
        containers_images_dict | dict2items | 
        selectattr('value', 'search', '^((?!' + new_image_versions[.key] + ').)*$') | 
        map(attribute='key') | 
        list
      }}

- name: Print containers needing update
  debug:
    msg: "Containers needing update: {{ containers_to_update }}"

- name: Update all Docker containers
  docker_container:
    name: "{{ item }}"
    image: "{{ new_image_versions[item] }}"
    state: reloaded
  loop: "{{ containers_to_update }}"
  when: can_update_docker | default(false)

- name: Handle failed requests to Docker Hub
  debug:
    msg: "Failed requests: {{ new_image_versions_response.results | selectattr('status', 'equalto', 404) | map(attribute='item') | list }}"
  when: new_image_versions_response.results | selectattr('status', 'equalto', 404) | list | length > 0
